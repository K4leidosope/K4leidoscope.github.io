<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>碎片</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-10-21T09:22:46.949Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kaleidoscope</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模板整理</title>
    <link href="http://example.com/2025/10/21/%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86/"/>
    <id>http://example.com/2025/10/21/%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86/</id>
    <published>2025-10-21T09:20:38.000Z</published>
    <updated>2025-10-21T09:22:46.949Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高精度">高精度</h3><figure class="highlight plaintext"><figcaption><span>INT &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">public:</span><br><span class="line">  int a[M];</span><br><span class="line">  INT() &#123; memset(a, 0, sizeof(a)); &#125;</span><br><span class="line">  void clear() &#123; memset(a, 0, sizeof(a)); &#125;</span><br><span class="line">  INT(int x) &#123;</span><br><span class="line">    clear();</span><br><span class="line">    while (x) &#123;</span><br><span class="line">      a[++a[0]] = x % 10;</span><br><span class="line">      x /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    while (a[a[0]] == 0 &amp;&amp; a[0])</span><br><span class="line">      a[0]--;</span><br><span class="line">  &#125;</span><br><span class="line">  INT &amp;operator=(int x) &#123;</span><br><span class="line">    clear();</span><br><span class="line">    while (x) &#123;</span><br><span class="line">      a[++a[0]] = x % 10;</span><br><span class="line">      x /= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    while (a[a[0]] == 0 &amp;&amp; a[0])</span><br><span class="line">      a[0]--;</span><br><span class="line">    return *this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  short cmp(const INT &amp;x) &#123;</span><br><span class="line">    if (a[0] &gt; x.a[0])</span><br><span class="line">      return 1;</span><br><span class="line">    if (a[0] &lt; x.a[0])</span><br><span class="line">      return -1;</span><br><span class="line">    for (register int i = a[0]; i &gt;= 1; i--) &#123;</span><br><span class="line">      if (a[i] &gt; x.a[i])</span><br><span class="line">        return 1;</span><br><span class="line">      if (a[i] &lt; x.a[i])</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  bool operator&gt;(const INT &amp;x) &#123; return cmp(x) == 1; &#125;</span><br><span class="line">  bool operator==(const INT &amp;x) &#123; return cmp(x) == 0; &#125;</span><br><span class="line">  bool operator&lt;(const INT &amp;x) &#123; return cmp(x) == -1; &#125;</span><br><span class="line">  bool operator&gt;=(const INT &amp;x) &#123; return !(*this &lt; x); &#125;</span><br><span class="line">  bool operator&lt;=(const INT &amp;x) &#123; return !(*this &gt; x); &#125;</span><br><span class="line"></span><br><span class="line">  INT operator-(const INT &amp;x) &#123;</span><br><span class="line">    INT a = *this, c;</span><br><span class="line">    c.a[0] = a.a[0] &gt; x.a[0] ? a.a[0] : x.a[0];</span><br><span class="line">    for (register int i = 1; i &lt;= c.a[0]; i++) &#123;</span><br><span class="line">      c.a[i] += a.a[i] - x.a[i];</span><br><span class="line">      if (c.a[i] &lt; 0) &#123;</span><br><span class="line">        c.a[i] += 10;</span><br><span class="line">        a.a[i + 1]--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (c.a[c.a[0]] == 0 &amp;&amp; c.a[0])</span><br><span class="line">      c.a[0]--;</span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line">  INT operator*(const INT &amp;x) &#123;</span><br><span class="line">    INT c;</span><br><span class="line">    for (register int i = 1; i &lt;= a[0]; i++) &#123;</span><br><span class="line">      for (register int j = 1; j &lt;= x.a[0]; j++) &#123;</span><br><span class="line">        c.a[i + j - 1] += a[i] * x.a[j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c.a[0] = a[0] + x.a[0];</span><br><span class="line">    for (register int i = 1; i &lt;= c.a[0]; i++) &#123;</span><br><span class="line">      if (c.a[i] &gt;= 10) &#123;</span><br><span class="line">        c.a[i + 1] += c.a[i] / 10;</span><br><span class="line">        c.a[i] %= 10;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (c.a[c.a[0]] == 0 &amp;&amp; c.a[0] &gt; 0)</span><br><span class="line">      c.a[0]--;</span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line">  INT operator/(const int &amp;x) &#123;</span><br><span class="line">    INT c;</span><br><span class="line">    int t = 0, s = 0;</span><br><span class="line">    bool flag = 1;</span><br><span class="line">    for (register int i = a[0]; i &gt;= 1; i--) &#123;</span><br><span class="line">      t = s * 10 + a[i];</span><br><span class="line">      if (t / x &gt; 0 || t == 0) &#123;</span><br><span class="line">        c.a[++c.a[0]] = t / x;</span><br><span class="line">        s = t % x;</span><br><span class="line">        flag = 0;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        s = t;</span><br><span class="line">        if (!flag)</span><br><span class="line">          c.a[++c.a[0]] = 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(c.a + 1, c.a + c.a[0] + 1);</span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;高精度&quot;&gt;高精度&lt;/h3&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;figcaption&gt;&lt;span&gt;INT &amp;#123;&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="模板" scheme="http://example.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>构思</title>
    <link href="http://example.com/2025/10/21/%E7%8B%97%E5%B1%8E/"/>
    <id>http://example.com/2025/10/21/%E7%8B%97%E5%B1%8E/</id>
    <published>2025-10-21T05:44:42.000Z</published>
    <updated>2025-10-21T06:19:52.253Z</updated>
    
    <content type="html"><![CDATA[<p>hexo的数学渲染Bug太多了</p><p>MD和Mathjax的双重渲染会出很多错误</p><p>网上的解决方法又和主题不兼容</p><p>最后乱猜出一个方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&#123; \&#125; \_ \$ (无法正常显示)</span><br></pre></td></tr></table></figure><p>替换成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\&#123; \\&#125; \\_ \\$ （可以正常显示）</span><br></pre></td></tr></table></figure><p>虽不知为何可以，可这确实能让一坨Bug较为正常地运行</p><p>似乎可以从中窥见内部代码有多么构思了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo的数学渲染Bug太多了&lt;/p&gt;
&lt;p&gt;MD和Mathjax的双重渲染会出很多错误&lt;/p&gt;
&lt;p&gt;网上的解决方法又和主题不兼容&lt;/p&gt;
&lt;p&gt;最后乱猜出一个方案：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="shit" scheme="http://example.com/categories/shit/"/>
    
    
    <category term="brainfuck" scheme="http://example.com/tags/brainfuck/"/>
    
  </entry>
  
  <entry>
    <title>练习#1-P2672</title>
    <link href="http://example.com/2025/10/20/%E7%BB%83%E4%B9%A0-1-P2672/"/>
    <id>http://example.com/2025/10/20/%E7%BB%83%E4%B9%A0-1-P2672/</id>
    <published>2025-10-20T12:50:12.000Z</published>
    <updated>2025-10-21T05:05:02.934Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2672">Link</a></p><h3 id="贪心策略证明：">贪心策略证明：</h3><p>总疲劳值=选取的住户疲劳值之和+最远端路程疲劳值</p><p>按住户疲劳值排序，选前X的住户得到方案I</p><p>由最远端路程疲劳值的单调性知：最远端位置小于I的最远位置对应方案总疲劳值小于I的总疲劳值</p><p>那么疲劳值最大的选法，其最远端位置必然大于等于I的最远端位置。对于最远端位置大于I的选法，剩余的X-1个待选位置需最大化，即取住户疲劳值前X-1项，此时这些选法前X-1项固定，只需最后一项最大化，取 $$max(s[i]+2*d[i])$$</p><p>最后只需比较该取法和方案I，取疲劳值大的那个即可</p><p>PS：自然语言还是太啰嗦了，下次尝试用符号来刻画</p><p>上面最大化对应集合表述应是：$$max\{S\}=max\{A \cap B\}=max\{A \cap \{max\{B\}\}\}$$，即将子部分最大而化简整个方案集合（给这种靠感觉的变化打个正确性补丁）</p><h3 id="为什么想了很久：">为什么想了很久：</h3><p>在简化，抽象化的过程中，抛弃了题目的特殊性，导致方向错误</p><p>N种数列：$\{a_{i,n}\},1\le i \le N$<br>不可能在$O(nlogn)$内求出$$max\{\ \sum_{1\le i_1 \le …i_N \le len} a_{sub \_ index(i),i_1} \}$$</p><p>这题的特殊性在于附加权的单调性，而不是数列的重复</p><h3 id="启发：">启发：</h3><p>注意思维的跳跃性</p><p>深搜，碰壁，返回所需的时间太久了</p><p>跳跃性的转换思维，广搜，才容易迅速找到正解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2672&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;贪心策略证明：&quot;&gt;贪心策略证明：&lt;/h3&gt;
&lt;p&gt;总疲劳值=选取的住户疲劳值之和+最远端路程疲劳值&lt;/p&gt;
&lt;p&gt;按住户疲劳值排序，选</summary>
      
    
    
    
    <category term="ACM_P" scheme="http://example.com/categories/ACM-P/"/>
    
    
    <category term="Luogu" scheme="http://example.com/tags/Luogu/"/>
    
    <category term="贪心" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
</feed>
